name: Release Process for Main

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout del codice dal repository con tutti i branch e i tag
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Imposta la versione di Java 21
      - name: Set up Zulu JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'

      # Step 3: Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Configura Git con nome, email e autenticazione con GITHUB_TOKEN
      - name: Configure Git User and Authentication
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      # Step 5: Esegui i comandi forniti per la preparazione della release
      - name: Execute release preparation and tagging script
        run: |
          #/bin/sh
          mvn -B release:prepare-with-pom -DdryRun=true -Darguments="-DskipTests -Dmaven.javadoc.skip=true"
          if [ $? -eq 0 ]; then
              mvn -f pom.xml.tag clean install -DskipTests
              export REPO=$(mvn -q -f pom.xml.tag -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
              echo REPO=$REPO 
              export VERSION=$(mvn -q -f pom.xml.tag -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
              echo VERSION=$VERSION
              export TAG=$REPO-$VERSION
              git tag -a $TAG -m "version $TAG"
              git push origin $TAG
          fi


      # Step 6: Build e tag dell'immagine Docker con la versione del tag
      - name: Version tag
        run: |
          export REPO=$(mvn -q -f pom.xml.tag -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
          echo REPO=$REPO 
          export VERSION=$(mvn -q -f pom.xml.tag -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo VERSION=$VERSION
          [ -f pom.xml.next ] && mv pom.xml.next pom.xml
          rm -f pom.xml.next
          rm -f pom.xml.releaseBackup
          rm -f pom.xml.tag
          rm -f release-pom.xml
          rm -f release.properties
          git commit -m "change snapshot version to next" .
          git push
          
